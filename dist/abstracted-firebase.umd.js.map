{"version":3,"file":"abstracted-firebase.umd.js","sources":["esnext/errors/FileDepthExceeded.js","esnext/errors/UndefinedAssignment.js","esnext/util.js","esnext/db.js"],"sourcesContent":["export default class FirebaseDepthExceeded extends Error {\n    constructor(e) {\n        super(e.message);\n        this.stack = e.stack;\n        if (e.name === \"Error\") {\n            e.name = \"AbstractedFirebase\";\n        }\n    }\n}\n","export default class UndefinedAssignment extends Error {\n    constructor(e) {\n        super(e.message);\n        this.stack = e.stack;\n        if (e.name === \"Error\") {\n            e.name = \"AbstractedFirebase\";\n        }\n    }\n}\n","export function slashNotation(path) {\n    return path.substr(0, 5) === \".info\"\n        ? path.substr(0, 5) + path.substring(5).replace(/\\./g, \"/\")\n        : path.replace(/\\./g, \"/\");\n}\nexport function _getFirebaseType(context, kind) {\n    if (!this.app) {\n        const e = new Error(`You must first connect before using the ${kind}() API`);\n        e.name = \"NotAllowed\";\n        throw e;\n    }\n    const property = `_${kind}`;\n    if (!context[property]) {\n        context[property] = this.app.storage();\n    }\n    return context[property];\n}\n","import { wait } from \"common-types\";\nimport * as convert from \"typed-conversions\";\nimport { SerializedQuery } from \"serialized-query\";\nimport { slashNotation } from \"./util\";\nimport FileDepthExceeded from \"./errors/FileDepthExceeded\";\nimport UndefinedAssignment from \"./errors/UndefinedAssignment\";\nimport Parallel from \"wait-in-parallel\";\nexport var FirebaseBoolean;\n(function (FirebaseBoolean) {\n    FirebaseBoolean[FirebaseBoolean[\"true\"] = 1] = \"true\";\n    FirebaseBoolean[FirebaseBoolean[\"false\"] = 0] = \"false\";\n})(FirebaseBoolean || (FirebaseBoolean = {}));\n/** time by which the dynamically loaded mock library should be loaded */\nexport const MOCK_LOADING_TIMEOUT = 2000;\nexport class RealTimeDB {\n    constructor() {\n        /** how many miliseconds before the attempt to connect to DB is timed out */\n        this.CONNECTION_TIMEOUT = 5000;\n        this._isConnected = false;\n        this._mockLoadingState = \"not-applicable\";\n        this._waitingForConnection = [];\n        this._onConnected = [];\n        this._onDisconnected = [];\n        this._debugging = false;\n        this._mocking = false;\n        this._allowMocking = false;\n    }\n    initialize(config = {}) {\n        if (config.mocking) {\n            this._mocking = true;\n            this.getFireMock();\n        }\n        else {\n            this._mocking = false;\n            this.connectToFirebase(config).then(() => this.listenForConnectionStatus());\n        }\n    }\n    query(path) {\n        return SerializedQuery.path(path);\n    }\n    /** Get a DB reference for a given path in Firebase */\n    ref(path) {\n        return this._mocking\n            ? this.mock.ref(path)\n            : this._database.ref(path);\n    }\n    get isMockDb() {\n        return this._mocking;\n    }\n    get mock() {\n        if (!this._mocking && !this._allowMocking) {\n            const e = new Error(\"You can not mock the database without setting mocking in the constructor\");\n            e.name = \"AbstractedFirebase::NotAllowed\";\n            throw e;\n        }\n        if (this._mockLoadingState === \"loading\") {\n            const e = new Error(`Loading the mock library is an asynchronous task; typically it takes very little time but it is currently in process. You can listen to \"waitForConnection()\" to ensure the mock library is ready.`);\n            e.name = \"AbstractedFirebase::AsyncError\";\n            throw e;\n        }\n        if (!this._mock) {\n            const e = new Error(`Attempting to use mock getter but _mock is not set!`);\n            e.name = \"AbstractedFirebase::NotAllowed\";\n            throw e;\n        }\n        return this._mock;\n    }\n    async waitForConnection() {\n        if (this._mocking) {\n            // MOCKING\n            if (this._mockLoadingState === \"loaded\") {\n                return;\n            }\n            const timeout = new Date().getTime() + MOCK_LOADING_TIMEOUT;\n            while (this._mockLoadingState === \"loading\" && new Date().getTime() < timeout) {\n                await wait(1);\n            }\n            return;\n        }\n        else {\n            // NON-MOCKING\n            if (this.isConnected) {\n                return;\n            }\n            const connectionEvent = async () => {\n                this._eventManager.once(\"connection\", (state) => {\n                    if (state) {\n                        return;\n                    }\n                    else {\n                        throw Error(`While waiting for connection received a disconnect message`);\n                    }\n                });\n            };\n            const p = new Parallel();\n            p.add(\"connection\", connectionEvent, this.CONNECTION_TIMEOUT);\n            await p.isDone();\n            this._isConnected = true;\n            return this;\n        }\n    }\n    get isConnected() {\n        return this._isConnected;\n    }\n    /** set a \"value\" in the database at a given path */\n    async set(path, value) {\n        try {\n            return this.ref(path).set(value);\n        }\n        catch (e) {\n            if (e.message.indexOf(\"path specified exceeds the maximum depth that can be written\") !== -1) {\n                console.log(\"FILE DEPTH EXCEEDED\");\n                throw new FileDepthExceeded(e);\n            }\n            if (e.name === \"Error\") {\n                e.name = \"AbstractedFirebaseSetError\";\n            }\n            if (e.message.indexOf(\"First argument contains undefined in property\") !== -1) {\n                e.name = \"FirebaseUndefinedValueAssignment\";\n                throw new UndefinedAssignment(e);\n            }\n            throw e;\n        }\n    }\n    /**\n     * Equivalent to Firebase's traditional \"multi-path updates\" which are\n     * in behaviour are really \"multi-path SETs\". Calling this function provides\n     * access to simplified API for adding and executing this operation.\n     *\n     * @param paths an array of path and value updates\n     */\n    multiPathSet(base) {\n        const mps = [];\n        const ref = this.ref.bind(this);\n        let callback;\n        const api = {\n            /** The base reference path which all paths will be relative to */\n            _basePath: base || \"/\",\n            // a fluent API setter/getter for _basePath\n            basePath(path) {\n                if (path === undefined) {\n                    return api._basePath;\n                }\n                api._basePath = path;\n                return api;\n            },\n            /** Add in a new path and value to be included in the operation */\n            add(pathValue) {\n                const exists = new Set(api.paths);\n                if (pathValue.path.indexOf(\"/\") === -1) {\n                    pathValue.path = \"/\" + pathValue.path;\n                }\n                if (exists.has(pathValue.path)) {\n                    const e = new Error(`You have attempted to add the path \"${pathValue.path}\" twice.`);\n                    e.code = \"duplicate-path\";\n                    throw e;\n                }\n                mps.push(pathValue);\n                return api;\n            },\n            /** the relative paths from the base which will be updated upon execution */\n            get paths() {\n                return mps.map(i => i.path);\n            },\n            /** the absolute paths (including the base offset) which will be updated upon execution */\n            get fullPaths() {\n                return mps.map(i => [api._basePath, i.path].join(\"/\").replace(/[\\/]{2,3}/g, \"/\"));\n            },\n            get payload() {\n                return mps;\n            },\n            /** receive a call back on conclusion of the firebase operation */\n            callback(cb) {\n                callback = cb;\n                return;\n            },\n            async execute() {\n                const updateHash = {};\n                const fullyQualifiedPaths = mps.map(i => (Object.assign({}, i, { path: [api._basePath, i.path].join(\"/\").replace(/[\\/]{2,3}/g, \"/\") })));\n                fullyQualifiedPaths.map(item => {\n                    updateHash[item.path] = item.value;\n                });\n                return ref()\n                    .update(updateHash)\n                    .then(() => {\n                    if (callback) {\n                        callback(null, mps);\n                        return;\n                    }\n                })\n                    .catch((e) => {\n                    if (callback) {\n                        callback(e, mps);\n                    }\n                    throw e;\n                });\n            }\n        };\n        return api;\n    }\n    async update(path, value) {\n        try {\n            return this.ref(path).update(value);\n        }\n        catch (e) {\n            if (e.name === \"Error\") {\n                e.name = \"AbstractedFirebaseUpdateError\";\n            }\n            if (e.message.indexOf(\"First argument path specified exceeds the maximum depth\") !==\n                -1) {\n                e.name = \"AbstractedFirebaseUpdateDepthError\";\n            }\n            throw e;\n        }\n    }\n    async remove(path, ignoreMissing = false) {\n        const ref = this.ref(path);\n        return ref.remove().catch((e) => {\n            if (ignoreMissing && e.message.indexOf(\"key is not defined\") !== -1) {\n                return Promise.resolve();\n            }\n            this.handleError(e, \"remove\", `attempt to remove ${path} failed: `);\n        });\n    }\n    /** returns the firebase snapshot at a given path in the database */\n    async getSnapshot(path) {\n        return typeof path === \"string\"\n            ? this.ref(slashNotation(path)).once(\"value\")\n            : path.setDB(this).execute();\n    }\n    /** returns the JS value at a given path in the database */\n    async getValue(path) {\n        const snap = await this.getSnapshot(path);\n        return snap.val();\n    }\n    /**\n     * Gets a snapshot from a given path in the DB\n     * and converts it to a JS object where the snapshot's key\n     * is included as part of the record (as 'id' by default)\n     */\n    async getRecord(path, idProp = \"id\") {\n        return this.getSnapshot(path).then(snap => {\n            let object = snap.val();\n            if (typeof object !== \"object\") {\n                object = { value: snap.val() };\n            }\n            return Object.assign({}, object, { [idProp]: snap.key });\n        });\n    }\n    /**\n     * Get a list of a given type\n     *\n     * @param path the path in the database to\n     * @param idProp\n     */\n    async getList(path, idProp = \"id\") {\n        return this.getSnapshot(path).then(snap => {\n            return snap.val() ? convert.snapshotToArray(snap, idProp) : [];\n        });\n    }\n    /**\n     * getSortedList() will return the sorting order that was defined in the Firebase\n     * Query. This _can_ be useful but often the sort orders\n     * really intended for the server only (so that filteration\n     * is done on the right set of data before sending to client).\n     *\n     * @param query Firebase \"query ref\"\n     * @param idProp what property name should the Firebase key be converted to (default is \"id\")\n     */\n    async getSortedList(query, idProp = \"id\") {\n        return this.getSnapshot(query).then(snap => {\n            return convert.snapshotToArray(snap, idProp);\n        });\n    }\n    /**\n     * Pushes a value (typically a hash) under a given path in the\n     * database but allowing Firebase to insert a unique \"push key\"\n     * to ensure the value is placed into a Dictionary/Hash structure\n     * of the form of \"/{path}/{pushkey}/{value}\"\n     */\n    async push(path, value) {\n        this.ref(path).push(value);\n    }\n    /** validates the existance of a path in the database */\n    async exists(path) {\n        return this.getSnapshot(path).then(snap => (snap.val() ? true : false));\n    }\n    handleError(e, name, message = \"\") {\n        console.error(`Error ${message}:`, e);\n        return Promise.reject({\n            code: `firebase/${name}`,\n            message: message + e.message || e\n        });\n    }\n    async getFireMock() {\n        try {\n            this._mockLoadingState = \"loading\";\n            // tslint:disable-next-line:no-implicit-dependencies\n            const FireMock = await import(\"firemock\");\n            this._mockLoadingState = \"loaded\";\n            this._mock = new FireMock.Mock();\n            this._isConnected = true;\n            this._mocking = true;\n        }\n        catch (e) {\n            console.error(`There was an error asynchronously loading Firemock library.`);\n            if (e.stack) {\n                console.log(`The stack trace was:\\n`, e.stack);\n            }\n            throw e;\n        }\n    }\n}\n"],"names":["FirebaseBoolean","SerializedQuery","wait","FileDepthExceeded","convert.snapshotToArray"],"mappings":"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"}